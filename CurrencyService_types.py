##################################################
# file: CurrencyService_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    /usr/bin/wsdl2py -b http://www.restfulwebservices.net/wcf/CurrencyService.svc?wsdl
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# http://schemas.microsoft.com/2003/10/Serialization/
##############################

class ns1:
    targetNamespace = "http://schemas.microsoft.com/2003/10/Serialization/"

    class char_Def(ZSI.TCnumbers.Iint, TypeDefinition):
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        type = (schema, "char")
        def __init__(self, pname, **kw):
            ZSI.TCnumbers.Iint.__init__(self, pname, pyclass=None, **kw)
            class Holder(int):
                typecode = self
            self.pyclass = Holder

    class duration_Def(ZSI.TCtimes.Duration, TypeDefinition):
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        type = (schema, "duration")
        def __init__(self, pname, **kw):
            ZSI.TCtimes.Duration.__init__(self, pname, pyclass=None, **kw)
            class Holder(tuple):
                typecode = self
            self.pyclass = Holder

    class guid_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        type = (schema, "guid")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class anyType_Dec(ZSI.TC.AnyType, ElementDeclaration):
        literal = "anyType"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","anyType")
            kw["aname"] = "_anyType"
            ZSI.TC.AnyType.__init__(self, **kw)

    class anyURI_Dec(ZSI.TC.URI, ElementDeclaration):
        literal = "anyURI"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","anyURI")
            kw["aname"] = "_anyURI"
            class IHolder(str): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_anyURI_immutable_holder"
            ZSI.TC.URI.__init__(self, **kw)

    class base64Binary_Dec(ZSI.TC.Base64String, ElementDeclaration):
        literal = "base64Binary"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","base64Binary")
            kw["aname"] = "_base64Binary"
            class IHolder(str): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_base64Binary_immutable_holder"
            ZSI.TC.Base64String.__init__(self, **kw)

    class boolean_Dec(ZSI.TC.Boolean, ElementDeclaration):
        literal = "boolean"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","boolean")
            kw["aname"] = "_boolean"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_boolean_immutable_holder"
            ZSI.TC.Boolean.__init__(self, **kw)

    class byte_Dec(ZSI.TCnumbers.Ibyte, ElementDeclaration):
        literal = "byte"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","byte")
            kw["aname"] = "_byte"
            class IHolder(str): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_byte_immutable_holder"
            ZSI.TCnumbers.Ibyte.__init__(self, **kw)

    class dateTime_Dec(ZSI.TCtimes.gDateTime, ElementDeclaration):
        literal = "dateTime"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","dateTime")
            kw["aname"] = "_dateTime"
            class IHolder(tuple): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_dateTime_immutable_holder"
            ZSI.TCtimes.gDateTime.__init__(self, **kw)

    class decimal_Dec(ZSI.TC.Decimal, ElementDeclaration):
        literal = "decimal"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","decimal")
            kw["aname"] = "_decimal"
            class IHolder(float): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_decimal_immutable_holder"
            ZSI.TC.Decimal.__init__(self, **kw)

    class double_Dec(ZSI.TCnumbers.FPdouble, ElementDeclaration):
        literal = "double"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","double")
            kw["aname"] = "_double"
            class IHolder(float): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_double_immutable_holder"
            ZSI.TCnumbers.FPdouble.__init__(self, **kw)

    class float_Dec(ZSI.TCnumbers.FPfloat, ElementDeclaration):
        literal = "float"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","float")
            kw["aname"] = "_float"
            class IHolder(float): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_float_immutable_holder"
            ZSI.TCnumbers.FPfloat.__init__(self, **kw)

    class int_Dec(ZSI.TCnumbers.Iint, ElementDeclaration):
        literal = "int"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","int")
            kw["aname"] = "_int"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_int_immutable_holder"
            ZSI.TCnumbers.Iint.__init__(self, **kw)

    class long_Dec(ZSI.TCnumbers.Ilong, ElementDeclaration):
        literal = "long"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","long")
            kw["aname"] = "_long"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_long_immutable_holder"
            ZSI.TCnumbers.Ilong.__init__(self, **kw)

    class QName_Dec(ZSI.TC.QName, ElementDeclaration):
        literal = "QName"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","QName")
            kw["aname"] = "_QName"
            class IHolder(tuple): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_QName_immutable_holder"
            ZSI.TC.QName.__init__(self, **kw)

    class short_Dec(ZSI.TCnumbers.Ishort, ElementDeclaration):
        literal = "short"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","short")
            kw["aname"] = "_short"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_short_immutable_holder"
            ZSI.TCnumbers.Ishort.__init__(self, **kw)

    class string_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "string"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","string")
            kw["aname"] = "_string"
            class IHolder(str): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_string_immutable_holder"
            ZSI.TC.String.__init__(self, **kw)

    class unsignedByte_Dec(ZSI.TCnumbers.IunsignedByte, ElementDeclaration):
        literal = "unsignedByte"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","unsignedByte")
            kw["aname"] = "_unsignedByte"
            class IHolder(str): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_unsignedByte_immutable_holder"
            ZSI.TCnumbers.IunsignedByte.__init__(self, **kw)

    class unsignedInt_Dec(ZSI.TCnumbers.IunsignedInt, ElementDeclaration):
        literal = "unsignedInt"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","unsignedInt")
            kw["aname"] = "_unsignedInt"
            class IHolder(str): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_unsignedInt_immutable_holder"
            ZSI.TCnumbers.IunsignedInt.__init__(self, **kw)

    class unsignedLong_Dec(ZSI.TCnumbers.IunsignedLong, ElementDeclaration):
        literal = "unsignedLong"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","unsignedLong")
            kw["aname"] = "_unsignedLong"
            class IHolder(str): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_unsignedLong_immutable_holder"
            ZSI.TCnumbers.IunsignedLong.__init__(self, **kw)

    class unsignedShort_Dec(ZSI.TCnumbers.IunsignedShort, ElementDeclaration):
        literal = "unsignedShort"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","unsignedShort")
            kw["aname"] = "_unsignedShort"
            class IHolder(str): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_unsignedShort_immutable_holder"
            ZSI.TCnumbers.IunsignedShort.__init__(self, **kw)

    class char_Dec(ElementDeclaration):
        literal = "char"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","char")
            kw["aname"] = "_char"
            if ns1.char_Def not in ns1.char_Dec.__bases__:
                bases = list(ns1.char_Dec.__bases__)
                bases.insert(0, ns1.char_Def)
                ns1.char_Dec.__bases__ = tuple(bases)

            ns1.char_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "char_Dec_Holder"

    class duration_Dec(ElementDeclaration):
        literal = "duration"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","duration")
            kw["aname"] = "_duration"
            if ns1.duration_Def not in ns1.duration_Dec.__bases__:
                bases = list(ns1.duration_Dec.__bases__)
                bases.insert(0, ns1.duration_Def)
                ns1.duration_Dec.__bases__ = tuple(bases)

            ns1.duration_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "duration_Dec_Holder"

    class guid_Dec(ElementDeclaration):
        literal = "guid"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","guid")
            kw["aname"] = "_guid"
            if ns1.guid_Def not in ns1.guid_Dec.__bases__:
                bases = list(ns1.guid_Dec.__bases__)
                bases.insert(0, ns1.guid_Def)
                ns1.guid_Dec.__bases__ = tuple(bases)

            ns1.guid_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "guid_Dec_Holder"

# end class ns1 (tns: http://schemas.microsoft.com/2003/10/Serialization/)

##############################
# targetNamespace
# http://www.restfulwebservices.net/ServiceContracts/2008/01
##############################

class ns2:
    targetNamespace = "http://www.restfulwebservices.net/ServiceContracts/2008/01"

    class GetConversionRate_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetConversionRate"
        schema = "http://www.restfulwebservices.net/ServiceContracts/2008/01"
        def __init__(self, **kw):
            ns = ns2.GetConversionRate_Dec.schema
            TClist = [GTD("http://www.restfulwebservices.net/DataContracts/2008/01","CurrencyCode",lazy=False)(pname=(ns,"FromCurrency"), aname="_FromCurrency", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.restfulwebservices.net/DataContracts/2008/01","CurrencyCode",lazy=False)(pname=(ns,"ToCurrency"), aname="_ToCurrency", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.restfulwebservices.net/ServiceContracts/2008/01","GetConversionRate")
            kw["aname"] = "_GetConversionRate"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._FromCurrency = None
                    self._ToCurrency = None
                    return
            Holder.__name__ = "GetConversionRate_Holder"
            self.pyclass = Holder

    class GetConversionRateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetConversionRateResponse"
        schema = "http://www.restfulwebservices.net/ServiceContracts/2008/01"
        def __init__(self, **kw):
            ns = ns2.GetConversionRateResponse_Dec.schema
            TClist = [GTD("http://www.restfulwebservices.net/DataContracts/2008/01","Currency",lazy=False)(pname=(ns,"GetConversionRateResult"), aname="_GetConversionRateResult", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.restfulwebservices.net/ServiceContracts/2008/01","GetConversionRateResponse")
            kw["aname"] = "_GetConversionRateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._GetConversionRateResult = None
                    return
            Holder.__name__ = "GetConversionRateResponse_Holder"
            self.pyclass = Holder

# end class ns2 (tns: http://www.restfulwebservices.net/ServiceContracts/2008/01)

##############################
# targetNamespace
# http://GOTLServices.FaultContracts/2008/01
##############################

class ns3:
    targetNamespace = "http://GOTLServices.FaultContracts/2008/01"

    class DefaultFaultContract_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://GOTLServices.FaultContracts/2008/01"
        type = (schema, "DefaultFaultContract")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.DefaultFaultContract_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"ErrorId"), aname="_ErrorId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ErrorMessage"), aname="_ErrorMessage", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://schemas.microsoft.com/2003/10/Serialization/","guid",lazy=False)(pname=(ns,"CorrelationId"), aname="_CorrelationId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ErrorId = None
                    self._ErrorMessage = None
                    self._CorrelationId = None
                    return
            Holder.__name__ = "DefaultFaultContract_Holder"
            self.pyclass = Holder

    class DefaultFaultContract_Dec(ElementDeclaration):
        literal = "DefaultFaultContract"
        schema = "http://GOTLServices.FaultContracts/2008/01"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://GOTLServices.FaultContracts/2008/01","DefaultFaultContract")
            kw["aname"] = "_DefaultFaultContract"
            if ns3.DefaultFaultContract_Def not in ns3.DefaultFaultContract_Dec.__bases__:
                bases = list(ns3.DefaultFaultContract_Dec.__bases__)
                bases.insert(0, ns3.DefaultFaultContract_Def)
                ns3.DefaultFaultContract_Dec.__bases__ = tuple(bases)

            ns3.DefaultFaultContract_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "DefaultFaultContract_Dec_Holder"

# end class ns3 (tns: http://GOTLServices.FaultContracts/2008/01)

##############################
# targetNamespace
# http://www.restfulwebservices.net/ServiceContracts/2008/01/Imports
##############################

class ns0:
    targetNamespace = "http://www.restfulwebservices.net/ServiceContracts/2008/01/Imports"

# end class ns0 (tns: http://www.restfulwebservices.net/ServiceContracts/2008/01/Imports)

##############################
# targetNamespace
# http://www.restfulwebservices.net/DataContracts/2008/01
##############################

class ns4:
    targetNamespace = "http://www.restfulwebservices.net/DataContracts/2008/01"

    class CurrencyCode_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.restfulwebservices.net/DataContracts/2008/01"
        type = (schema, "CurrencyCode")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Currency_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.restfulwebservices.net/DataContracts/2008/01"
        type = (schema, "Currency")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns4.Currency_Def.schema
            TClist = [GTD("http://www.restfulwebservices.net/DataContracts/2008/01","CurrencyCode",lazy=False)(pname=(ns,"FromCurrency"), aname="_FromCurrency", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.restfulwebservices.net/DataContracts/2008/01","CurrencyCode",lazy=False)(pname=(ns,"ToCurrency"), aname="_ToCurrency", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"Rate"), aname="_Rate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._FromCurrency = None
                    self._ToCurrency = None
                    self._Rate = None
                    return
            Holder.__name__ = "Currency_Holder"
            self.pyclass = Holder

    class CurrencyCode_Dec(ElementDeclaration):
        literal = "CurrencyCode"
        schema = "http://www.restfulwebservices.net/DataContracts/2008/01"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://www.restfulwebservices.net/DataContracts/2008/01","CurrencyCode")
            kw["aname"] = "_CurrencyCode"
            if ns4.CurrencyCode_Def not in ns4.CurrencyCode_Dec.__bases__:
                bases = list(ns4.CurrencyCode_Dec.__bases__)
                bases.insert(0, ns4.CurrencyCode_Def)
                ns4.CurrencyCode_Dec.__bases__ = tuple(bases)

            ns4.CurrencyCode_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "CurrencyCode_Dec_Holder"

    class Currency_Dec(ElementDeclaration):
        literal = "Currency"
        schema = "http://www.restfulwebservices.net/DataContracts/2008/01"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://www.restfulwebservices.net/DataContracts/2008/01","Currency")
            kw["aname"] = "_Currency"
            if ns4.Currency_Def not in ns4.Currency_Dec.__bases__:
                bases = list(ns4.Currency_Dec.__bases__)
                bases.insert(0, ns4.Currency_Def)
                ns4.Currency_Dec.__bases__ = tuple(bases)

            ns4.Currency_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "Currency_Dec_Holder"

# end class ns4 (tns: http://www.restfulwebservices.net/DataContracts/2008/01)
